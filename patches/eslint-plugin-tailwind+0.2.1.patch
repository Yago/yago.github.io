diff --git a/node_modules/eslint-plugin-tailwind/lib/rules/class-order.js b/node_modules/eslint-plugin-tailwind/lib/rules/class-order.js
index 6a3ab42..373344d 100755
--- a/node_modules/eslint-plugin-tailwind/lib/rules/class-order.js
+++ b/node_modules/eslint-plugin-tailwind/lib/rules/class-order.js
@@ -57,16 +57,57 @@ module.exports = {
     function getValueNode(node) {
       if (node.attributeValue) {
         return node.attributeValue
+      } else if (
+        node.quasi &&
+        node.quasi.expressions[0] &&
+        node.quasi.expressions[0].quasi
+      ) {
+        return node.quasi.expressions[0].quasi.quasis[0]
+      } else if (node.quasi) {
+        return node.quasi.quasis[0]
       }
 
       return Array.isArray(node.value) ? node.value[0] : node.value
     }
 
+    /**
+     * @param {ASTNode} node
+     */
+    function isValidTaggedTemplateNode(node) {
+      try {
+        if (
+          !node.tag ||
+          (node.tag.object.name !== 'tw' &&
+            node.quasi.expressions[0].tag.name !== 'tw' &&
+            node.tag.name !== 'tw')
+        ) {
+          return false
+        }
+        if (
+          !node.quasi.quasis ||
+          (!node.quasi.quasis[0].value &&
+            !node.quasi.expressions[0].quasi.quasis[0].value)
+        ) {
+          return false
+        }
+      } catch (err) {
+        if (err instanceof TypeError) {
+          return false
+        } else {
+          throw err
+        }
+      }
+      return true
+    }
+
     /**
      * @param {ASTNode} node
      */
     function isValidJSXNode(node) {
-      if (!node.name || ['class', 'className'].indexOf(node.name.name) === -1) {
+      if (
+        !node.name ||
+        ['class', 'className', 'tw'].indexOf(node.name.name) === -1
+      ) {
         return false
       }
       if (!getValueNode(node)) {
@@ -104,6 +145,21 @@ module.exports = {
     //----------------------------------------------------------------------
 
     return {
+      TaggedTemplateExpression(node) {
+        if (!isValidTaggedTemplateNode(node)) return
+
+        const valueNode = getValueNode(node)
+        const value = parseValue(valueNode.value.raw)
+        const sortedClasses = sortClassString(value, defaultSortOrder)
+        if (sortedClasses === value) return
+
+        report(node, (fixer) =>
+          fixer.replaceTextRange(
+            [valueNode.range[0] + 1, valueNode.range[1] - 1],
+            sortedClasses
+          )
+        )
+      },
       HTMLAttribute(node) {
         if (node.attributeName.value !== 'class') return
         if (!node.attributeValue.value) return
